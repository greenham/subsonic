// Generated by CoffeeScript 1.6.3
(function() {
  var Subsonic, request, fs, m3u8stream;

  request = require('superagent');
  fs = require('fs');
  m3u8stream = require('m3u8stream');

  Subsonic = (function() {
    function Subsonic(config) {
      var _ref;
      this.config = config;
      _ref = this.config, this.username = _ref.username, this.password = _ref.password, this.server = _ref.server, this.application = _ref.application, this.format = _ref.format, this.version = _ref.version;
      this.application || (this.application = 'subsonic node.js api');
      this.format || (this.format = 'json');
      this.version || (this.version = '1.16');
      this;
    }

    Subsonic.prototype.get = function(path, query, cb) {
      cb = arguments[arguments.length - 1];
      request.get("" + this.server + "/" + path + ".view").query({
        'u': this.username,
        'p': this.password
      }).query({
        'c': this.application,
        'v': this.version,
        'f': this.format
      }).query(typeof query !== 'function' ? query : void 0).end(function(res) {
        return cb(res.body['subsonic-response']);
      });
      return this;
    };

    Subsonic.prototype.m3u8 = function(id) {
      return "" 
      + this.server 
      + "/hls.m3u8?" 
      + 'u=' + this.username
      + '&p=' + this.password
      + '&c=' + this.application
      + '&v=' + this.version
      + '&f=' + this.format
      + '&id=' + id;
    };

    Subsonic.prototype.stream = function(link, outputFile) {
      m3u8stream(link).pipe(fs.createWriteStream(outputFile));
    };

    Subsonic.prototype.ping = function(cb) {
      return this.get('ping', function(response) {
        return cb(null, response);
      });
    };

    Subsonic.prototype.topLevelFolders = function(cb) {
      return this.get('getMusicFolders', function(res) {
        return cb(null, res.musicFolders.musicFolder);
      });
    };

    Subsonic.prototype.indexes = function(cb) {
      return this.get('getIndexes', function(res) {
        return cb(null, res.indexes.index);
      });
    };

    Subsonic.prototype.folder = function(id, cb) {
      return this.get('getMusicDirectory', {
        id: id
      }, function(response) {
        var _ref, _ref1, _ref2;
        return cb(null, {
          children: (_ref = response.directory) != null ? _ref.child : void 0,
          id: (_ref1 = response.directory) != null ? _ref1.id : void 0,
          name: (_ref2 = response.directory) != null ? _ref2.name : void 0
        });
      });
    };

    Subsonic.prototype.artists = function(cb) {
      return this.get('getArtists', function(res) {
        return cb(null, res.artists.index);
      });
    };

    Subsonic.prototype.artist = function(id, cb) {
      return this.get('getArtist', {
        id: id
      }, function(res) {
        return cb(null, res.artist);
      });
    };

    Subsonic.prototype.album = function(id, cb) {
      return this.get('getAlbum', {
        id: id
      }, function(res) {
        return cb(null, res.album);
      });
    };

    Subsonic.prototype.song = function(id, cb) {
      return this.get('getSong', {
        id: id
      }, function(res) {
        return cb(null, res.song);
      });
    };

    Subsonic.prototype.createShare = function(id, expires, cb) {
      if (typeof expires === 'function') {
        cb = expires.bind({});
        expires = (Date.now() / 1000) + 3600;
      }
      return this.get('createShare', {
        id: id,
        expires: expires
      }, function(res) {
        if (!res.shares) {
          return cb("No share found");
        }
        return cb(null, res.shares.share);
      });
    };

    Subsonic.prototype.v = function() {
      return '0.0.4';
    };

    return Subsonic;

  })();

  module.exports = Subsonic;

}).call(this);
